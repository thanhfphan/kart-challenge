// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Order defines model for Order.
type Order struct {
	Discounts *float32 `json:"discounts,omitempty"`
	Id        *string  `json:"id,omitempty"`
	Items     *[]struct {
		// ProductId ID of the product
		ProductId *string `json:"productId,omitempty"`

		// Quantity Item count
		Quantity *int `json:"quantity,omitempty"`
	} `json:"items,omitempty"`
	Products *[]Product `json:"products,omitempty"`
	Total    *float32   `json:"total,omitempty"`
}

// OrderReq Place a new order
type OrderReq struct {
	// CouponCode Optional promo code applied to the order
	CouponCode *string `json:"couponCode,omitempty"`
	Items      []struct {
		// ProductId ID of the product (required)
		ProductId string `json:"productId"`

		// Quantity Item count (required)
		Quantity int `json:"quantity"`
	} `json:"items"`
}

// Product defines model for Product.
type Product struct {
	Category *string `json:"category,omitempty"`
	Id       *string `json:"id,omitempty"`
	Image    *struct {
		Desktop   *string `json:"desktop,omitempty"`
		Mobile    *string `json:"mobile,omitempty"`
		Tablet    *string `json:"tablet,omitempty"`
		Thumbnail *string `json:"thumbnail,omitempty"`
	} `json:"image,omitempty"`
	Name *string `json:"name,omitempty"`

	// Price Selling price
	Price *float32 `json:"price,omitempty"`
}

// PlaceOrderJSONRequestBody defines body for PlaceOrder for application/json ContentType.
type PlaceOrderJSONRequestBody = OrderReq

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Place an order
	// (POST /order)
	PlaceOrder(c *gin.Context)
	// List products
	// (GET /product)
	ListProducts(c *gin.Context)
	// Find product by ID
	// (GET /product/{productId})
	GetProduct(c *gin.Context, productId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PlaceOrder operation middleware
func (siw *ServerInterfaceWrapper) PlaceOrder(c *gin.Context) {

	c.Set(Api_keyScopes, []string{"create_order"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PlaceOrder(c)
}

// ListProducts operation middleware
func (siw *ServerInterfaceWrapper) ListProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProducts(c)
}

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProduct(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/order", wrapper.PlaceOrder)
	router.GET(options.BaseURL+"/product", wrapper.ListProducts)
	router.GET(options.BaseURL+"/product/:productId", wrapper.GetProduct)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWb48TNxP/Kpaf5wWVkmzCoUrNO8oVOLXSne6gFToicLyzG3Nej7HHByna717Zziab",
	"ZFNQOd7cbezx/PnNzG/mC5fYWDRgyPP5F+7lChqRPi9dCS5+WIcWHClIx6XyEsNGHD6Lxup4cTubLkac",
	"1hb4nJvQLMHxdsRVeSDGp9PpdLz/h+9eenLK1OklQZNsbD/2/bAOyyDpIhkowUunLCk0fM4vzhlWjFbA",
	"NkJ8QP/HIAwpWg88J2hYinH3ThmCOobUbo9w+QEk8d2BcE6s4++N1X3v/++g4nP+v2IHeLFBu7jauDmg",
	"i5CEPsDwlwGoh/xKGbyGj8chXmkhgQlm4BPDlOfRAbwSg0XzDEs4fn2ZPoSO8DbIJJbAhLVaQckIE/Cd",
	"0n7mXz69unrz8vrmh6ebPXLwMSgH5U//NfODKvpF0F3HwHa+9ZQvvlooB1py4EPPuvI4AkUKghrd+rDH",
	"/hJVpWEY56OGnJ3ov0bUMND+4O8I7aGSFZH186JIea8QSzRaGZiUYHBSwn1hw1IrWSStPv8bf0pujjcq",
	"Jx9sPehJg0ul4SEtZo0nDZJYaqCHNJg1nja4Cs3SCKUf1Gan9ITZIcYwojkC+tlKyTsw7F+KyjolB3ji",
	"BrRWpmb5eo8MZmeTs8WIV+gaQXzOK42iR7enWa0dcQ8yOEXrm8ieuSqFVe/uIPWBipZXIDL/5IC297sW",
	"tOp3iD3YRrcInBH6HKU/DuK5MiXDQKxBB0ws42fkGrkSWoOpY2DB6WiUyM6Lwn8SdQ1uojC1kanwWOmr",
	"lfJMeSYYjCU2DTgJ7OnVBVsKDyVDk0xcWjDx8GwyY96CVJWSImqYMPYGA5PCsOrYvbfmrXnts747WLP3",
	"wioCT+/jxQ02wIKHKmimlbnz87dmzG6vwaJXhG69eNQVXa1oFZYTiU2BqBWOa4fBFpVDQ2Mw5VgKR4ke",
	"FcX+zPOGPUcs2WWqUzbux8BH/B6czwjMJtPJNAKEFoywis/52WQ2mcZBJGiVEpHLPnEQevqGKcZUBs4T",
	"upiXSFwJsDg2svjlZjBF5gVPv2K5zuPOEBjKtWT1Bufig4+GurXoa2N8O2/bNpO7t2h8rtDH0+nD2sm1",
	"uw+ID1KC9zG329Ajxk+y8YNhZ+6FViVTxgbKUrNjqddGBFqhU39DmYXOBnoE3VKVJWRjjx8fS/wZTSV/",
	"GHyWkI/7zcznt702vuXSgSB4lytg0S5G3IemEXHWdXk32y2DRJ2oqpNuR7ywu6FZw0DxvABiQutuZ/BM",
	"3AulI0+zCt1W9X4J/aE8XXXb3Xdm+Ps2w29NftsHLrq/DbiHW4fVHnLFl+1e055E8RooOBOJzCtT6/7G",
	"vY/cC+iASx3uRAMEzqe0D61z3SpHyFyywUeZ2iM77Ii9v3rtlilyAUY9qLdjRhn6+cnQQrf4ge26zeED",
	"NezFOfMhr9tZ9skANW7gM0iswmDKg0pIU63DeLlmF+fD5ZA61N0PZ+pVHIPBOTDEstR2FhaR0iOqG52H",
	"T3+7B7emVdwO8kjtVeV+ank7Gub9xIIedw9yy7aL9p8AAAD//99M8l3VDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
